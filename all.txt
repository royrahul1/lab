//(exp-1a counting sort)

#include <stdio.h>  
void counting_sort(int A[], int k, int n)
{
    int i, j;
    int B[15], C[100];
    for (i = 0; i <= k; i++)
        C[i] = 0;
    for (j = 1; j <= n; j++)
        C[A[j]] = C[A[j]] + 1;
    for (i = 1; i <= k; i++)
        C[i] = C[i] + C[i-1];
    for (j = n; j >= 1; j--)
    {
        B[C[A[j]]] = A[j];
        C[A[j]] = C[A[j]] - 1;
    }
    printf("The Sorted array is : ");
    for (i = 1; i <= n; i++)
        printf("%d ", B[i]);
}

int main()
{
    int n, k = 0, A[15], i;
    printf("Enter the number of input : ");
    scanf("%d", &n);
    printf("\nEnter the elements to be sorted :\n");
    for (i = 1; i <= n; i++)
    {
        scanf("%d", &A[i]);
        if (A[i] > k) {
            k = A[i];
        }
    }
    counting_sort(A, k, n);
    printf("\n");
    return 0;
}

//(exp-1b radix sort)

#include  <stdio.h>
  int print(int *a, int n) {
  int i;
  for (i = 0; i < n;  i++)
  printf("%d\t", a[i]);
  }
  void radix_sort(int *a, int n) {
  int i, b[10], m = 0,  exp = 1;
  for (i = 0; i < n;  i++) {
  if (a[i] > m)
  m = a[i];
  }
  while (m / exp >  0) {
  int box[10] = { 0 };
  for (i = 0; i <  n; i++)
  box[a[i] / exp %  10]++;
  for (i = 1; i <  10; i++)
  box[i] += box[i -  1];
  for (i = n - 1; i  >= 0; i--)
  b[--box[a[i] / exp  % 10]] = a[i];
  for (i = 0; i <  n; i++)
  a[i] = b[i];
  exp *= 10;
  }
  }
  int main() {
  int arr[10];
  int i, num;
  printf("Input  number of elements: ");
  scanf("%d",  &num);
  printf("\nInput  array elements one by one : ");
  for (i = 0; i <  num; i++)
  scanf("%d", &arr[i]);
  printf("\nArray  elements : ");
  print(&arr[0],  num);
  radix_sort(&arr[0], num);
  printf("\nSorted  elements : ");
  print(&arr[0],  num);
  return 0;
  }



//(exp-2a-insertion sort)

#include <stdio.h>
 int count = 0;
void printArray(int arr[], int n)
{
  int i;
  for (i = 0; i < n; i++)
      printf("%d ", arr[i]);
  printf("\n");
}
 
void insertionSort(int arr[], int n,int k)
{
  int i, item, j;
  for (j = 1; j < n; j++) 
	{
    item = arr[j];
    i = j - 1;
    while (i >= 0 && arr[i] < item)
	  {
      arr[i + 1] = arr[i];
      i = i - 1;
      count++;
    }
    arr[i + 1] = item;
    count++;
    if(count==k)
		{
    	printf("\nPrinting the unsorted content wrt to k value\n");
    	printArray(arr, n);
		}
  }
}

int main()
{
  int arr[100],n,i,k;
  printf("\nENTER THE SIZE OF THE ARRAY: ");
  scanf("%d",&n);
    
  printf("\nENTER ELEMENTS IN THE ARRAY: ");
  for(i=0;i<n;i++)
  	scanf("%d",&arr[i]);
    	
  printf("\nENTER VALUE OF K: ");
  scanf("%d",&k);
    
  insertionSort(arr, n , k);
    
  printf("\nSORTED ARRAY: ");
  printArray(arr, n);
  printf("no of step counts are %d\n",count);
 
  return 0;
}

//(exp-2b-selection sort)

#include<stdio.h>
int count = 0;
void printarray(int arr[],int n)
{
	for(int i=n-1;i>=0;i--)
	{
		printf("%d ",arr[i]);
	}
}
void printarray1(int arr[],int n)
{
	for(int i=0;i<n;i++)
	{
		printf("%d ",arr[i]);
	}
}
void selectionsort(int arr[],int n,int m)
{
	int indexmin,temp;
	
	for(int i=0; i<n-1;i++)// for passes
	{
		indexmin =i;
		if(i==m)
		{
		printf("array sorted till given pass is \n");
		printarray1(arr,n);	
		printf("\n");
		}
		
		
			for(int j= i+1;j<n;j++)
			{
				if(arr[j]<arr[indexmin])
				{
					indexmin =j;
					count ++;
				}
			}
			temp = arr[i];
			arr[i]= arr[indexmin];
			arr[indexmin]=temp;
		
	}
}
int main()
{
	
	int arr[20];
	int n,m;
	printf("enter the size of array\n");
	scanf("%d",&n);
	printf("enter the elements of array\n");
	for(int k=0;k<n;k++)
	{
		scanf("%d",&arr[k]);
	}
	printf("enter no of passes\n");
	scanf("%d",&m);
	
	selectionsort(arr,n,m);
	printf("sorted array in descending order is \n");
	printarray(arr,n);
	printf("\n");
	printf("number of comparisons are %d\n",count);
}


//(exp-3a-merge two array)

#include<stdio.h>
int main()
{
 	int aSize, bSize, mSize, i, j, k;
	int a[10], b[10], Merged[20];
 	printf("\nEnter the First Array Size  :  ");
 	scanf("%d", &aSize);
 	printf("\nEnter the First Array Elements :  ");
 	for(i = 0; i < aSize; i++)
  	{
      	scanf("%d", &a[i]);
  	}
  	printf("\nEnter the Second Array Size  :  ");
 	scanf("%d", &bSize);
 	printf("\nEnter the Second Array Elements  :  ");
 	for(i = 0; i < bSize; i++)
  	{
      	scanf("%d", &b[i]);
  	}
	mSize = aSize + bSize;
	i = 0;
	j = 0;
 	for(k = 0; k < mSize; k++)
  	{
  		if(i >= aSize || j >= bSize)
  		{
  			break;
	  	}
	  	if(a[i] < b[j])
	  	{
	  		Merged[k] = a[i];
	  		i++;
		}
		else
		{
			Merged[k] = b[j];
			j++;
		}
  	}
  	while(i < aSize)
  	{
  		Merged[k] = a[i];
  		k++;
  		i++;
	}
  	while(j < bSize)
  	{
  		Merged[k] = b[j];
  		k++;
  		j++;
	}
 	printf("\nArray Elements After Merging \n", mSize); 
 	for(i = 0; i < mSize; i++)
  	{
    	printf(" %d \t ",Merged[i]);
  	}
  	return 0;
}


//(exp-3b-merge sort)

#include <stdio.h>

void merge(int a[], int l, int mid, int h)
{
  int t[h-l+1];
  int i=l,j=mid+1,k=0;
  while(i<=mid && j<=h)
  {
    if(a[i]<a[j])
    {
      t[k]=a[i];
      i++;
      k++;
    }
    else
    {
      t[k]=a[j];
      j++;
      k++;
    }
  }

  for(;i<=mid;i++,k++)
  t[k]=a[i];
  for(;j<=h;j++,k++)
  t[k]=a[j];

  k=0;
  for(i=l; i<=h ;i++,k++)
  {
    a[i]=t[k]; 
  }
}


void mergesort(int a[],int l , int h)
{
  int mid;
  if(l<h)
  {
    mid=(l + h)/2;
    mergesort(a,l,mid);
    mergesort(a,mid+1,h);
    merge(a,l,mid,h);
  }
}

int main(void) 
{
  int n;
  printf("Enter the size: ");
  scanf("%d",&n);
  int a[n];
  printf("Enter %d elements:\n",n);
  for(int i= 0;i<n;i++)
    scanf("%d",&a[i]);
  mergesort(a,0, n-1);
  printf("The Sorted array is:\n");
  for(int i=0; i<=n-1 ;i++)
    printf("%d\t", a[i]); 
}


//(exp-3c-merge sort operation steps)

#include <stdio.h>
int mergesort(int a[],int l,int mid,int h)
{
  int i,j,k,var[100],c=0;
  k=l;i=l;j=mid+1;
  while((i<=mid)&&(j<=h))
  {
    if(a[i]<=a[j])
    {
      var[k]=a[i];
      i++;
      c++;
    }
    else
    {
      var[k]=a[j];
      j++;
      c++;
    }
    k++;
  }
  if(i>mid)
  {
    while(j<=h)
    {
      var[k]=a[j];
      j++;
      k++;
      c++;
    }
  }
  else
  {
    while(i<=mid)
    {
      var[k]=a[i];
      i++;
      k++;
      c++;
    }
  }
  for(k=l;k<=h;k++)
    {
      a[k]=var[k];
      
    }
    printf("step count= %d\tp= %d\tmid= %d\tr= %d\n",c,l,mid,h);
    return c;
}
int merge(int a[],int l,int h)
{
  int c=0;
  int mid,s1,s2;
  if(l<h)
  {
    mid=(l+h)/2;
    s1=merge(a,l,mid);
    s2=merge(a,mid+1,h);
    c=mergesort(a,l,mid,h);
  }
  else
  {
    return 0;
  }
  	
  return s1+s2+c;
}

int main()
{
  int a[100],i,n,c=0;
  printf("Enter the size: ");
  scanf("%d",&n);
  printf("Enter %d elements:\n",n);
  for(i=0;i<n;i++)
    scanf("%d",&a[i]);
  c=merge(a,0,n-1);
  printf("\nNumber of steps: %d\n",c);
  printf("Sorted array is:\n");
  for(i=0;i<n;i++)
    printf("%d\t",a[i]);
  return 0;
}


//(exp-4a-quicksort pivot end)

#include <stdio.h>
int c= 0;
void swap(int *a,int *b )
{
    int temp =*a;
    *a= *b;
    *b = temp;
}
int partition(int a[],int start,int end)
{
    int j ;
    int pivot = a[end];
    int i =(start-1);
    for(j=start ; j<end ; j++)
    {
        if(a[j]<= pivot)
        {
            i++;
            swap(&a[i],&a[j]);
            c++;
        }
    }
    swap(&a[i+1],&a[end]);
    c++;
    return i + 1; 
 
}
void quicksort(int a[],int start, int end)
{
    if(start < end)
    {
        int pi = partition(a,start,end);
        quicksort(a,start,pi-1);
        quicksort(a,pi+1,end);
    }
}
void printarray(int a[],int n)
{
    for(int i = 0 ; i< n ; i++)
    {
        printf("%d ",a[i]);
    }
}
int main()
{
    int size , arr[100];
    printf("enetr the size of an aray \n");
    scanf("%d",&size);
    printf("enetr the elements of the array\n");
    for(int  i = 0 ; i<size ;i++)
    {
        scanf("%d",&arr[i]);
    }
    printf("sorted array is: ");
    quicksort(arr,0,size-1);
    printarray(arr,size);
    printf("\nThe no. of iterations are : %d \n",c);
}

//(exp-4b-quicksort pivot start)

#include <stdio.h>
int c= 0;
void swap(int *a,int *b )
{
    int temp =*a;
    *a= *b;
    *b = temp;
}
int partition(int a[],int start,int end)
{
    int j ;
    int pivot = a[start];
    int i =(end+1);
    for(j=end ; j>start ; j--)
    {
        if(a[j]>= pivot)
        {
            i--;
            swap(&a[i],&a[j]);
            c++;
        }
    }
    swap(&a[i-1],&a[start]);
    c++;
    return i - 1; 
 
}
void quicksort(int a[],int start, int end)
{
    if(start < end)
    {
        int pi = partition(a,start,end);
        quicksort(a,start,pi-1);
        quicksort(a,pi+1,end);
    }
}
void printarray(int a[],int n)
{
    for(int i = 0 ; i< n ; i++)
    {
        printf("%d ",a[i]);
    }
}
int main()
{
    int size , arr[100];
    printf("enetr the size of an aray \n");
    scanf("%d",&size);
    printf("enetr the elements of the array\n");
    for(int  i = 0 ; i<size ;i++)
    {
        scanf("%d",&arr[i]);
        
    }
    printf("sorted array is: ");
    quicksort(arr,0,size-1);
    printarray(arr,size);
    printf("\nThe no. of iterations arr : %d \n",c);
}


//(exp-5a-max heap)

#include<stdio.h>
#include<stdlib.h>
void printarray(int a[] ,int n)
{
for(int i=0;i<n;i++)
{
printf("%d ",a[i]);
}
}
void swap(int *a ,int *b)
{
int temp=*a;
*a=*b;
*b=temp;
}
void maxheapify(int a[], int i, int m)
{
int largest=i;
int l=2*i+1;
int r=2*i+2;
if(l<m && a[l]>a[largest])
{
largest=l;
}
if(r<m && a[r]>a[largest])
{
largest=r;
}
if(largest!=i)
{
swap(&a[largest],&a[i]);

maxheapify(a,largest,m);
}
}
void buildmaxheap(int a[],int m)
{
for(int i=(m/2)-1;i>=0;i--)
{
maxheapify(a,i,m);
}
}
int main()
{
int arr[100],n;
printf("enter size to create array : \n");
scanf("%d",&n);
printf(" enter elements in array :\n");
for(int i=0;i<n;i++)
{
scanf("%d",&arr[i]);
}
printf("Elements before heapify: ");
printarray(arr,n);
printf("\nElements after heapify: ");
buildmaxheap(arr,n);
printarray(arr,n);
}

//(exp-5b-heap sort)

#include<stdio.h>
#include<stdlib.h>
void printarray(int a[] ,int n)
{
for(int i=0;i<n;i++)
{
printf("%d ",a[i]);
}
}
void swap(int *a ,int *b)
{
int temp=*a;
*a=*b;
*b=temp;
}
void maxheapify(int a[], int i, int m)
{
int largest=i;
int l=2*i+1;
int r=2*i+2;
if(l<m && a[l]>a[largest])
{
largest=l;
}
if(r<m && a[r]>a[largest])
{
largest=r;
}
if(largest!=i)
{
swap(&a[largest],&a[i]);

maxheapify(a,largest,m);
}
}
void buildmaxheap(int a[],int m)
{
for(int i=(m/2)-1;i>=0;i--)
{
maxheapify(a,i,m);
}
}
void heapsort(int a[],int m)
{
buildmaxheap(a,m);
for(int i=m;i>=2;i--)
{
swap(&a[0],&a[m-1]);
m--;
buildmaxheap(a,m);
}
}
int main()
{
int arr[100],n;
printf("enter size to create array : \n");
scanf("%d",&n);
printf("\nenter elements in array :\n");
for(int i=0;i<n;i++)
{
scanf("%d",&arr[i]);
}
printf("\nElements before heapify: ");
printarray(arr,n);
printf("\nElements after heapify: ");

heapsort(arr,n);
printarray(arr,n);
}


//(exp-6a-coin change)

#include<stdio.h>
#define max 30
void change(int coins[],int n,int V)
{
    int solution[max]={0};
    int i,j=0;
    for(i=0;i<n;i++)
    {
        while(V>=coins[i])
        {
            V=V-coins[i];
            solution[j++]=coins[i];
        }
    }
    printf("Coins List:\n");
    for(i=0;i<j;i++)
    {
        printf("%d\t",solution[i]);
    }
    printf("\nNumber of coins:%d",j);
}
int main()
{
    int coins[max],n,i,j,temp,V;
    printf("\nEnter number of denominations:");
    scanf("%d",&n);
    printf("\nEnter available denominations:");
    for(i=0;i<n;i++)
    {
        scanf("%d",&coins[i]);        
    }
    for(i=0;i<n-1;i++)
    {
        for(j=0;j<n-i-1;j++)
        {
            if(coins[j]<coins[j+1])
            {
                temp=coins[j];
                coins[j]=coins[j+1];
                coins[j+1]=temp;
            }
        }
    }
    printf("\nEnter total value V:");
    scanf("%d",&V);
    change(coins,n,V);
return 0; 
}

//(exp-6b-greedy fractional knapsack)

#include<stdio.h>
#define max 20
void Greedy_Knapsack(int N, float w[], float p[], float M) {
   float x[max], max_profit = 0;
   int i, j, u;
   u = M;
   for (i = 0; i < N; i++)
      x[i] = 0.0;

   for (i = 0; i < N; i++) {
      if (w[i] > u)
         break;
      else {
         x[i] = 1.0;
         max_profit = max_profit + p[i];
         u = u - w[i];
      }
   }
    if (i < N)
      x[i] = u / w[i];
   max_profit = max_profit + (x[i] * p[i]);
   printf("Fraction of items to be taken:\n");
   for (i = 0; i < N; i++)
      printf("%.2f\t:%.2f\n",w[i],x[i]);
   printf("\nThe Maximum profit: %.2f", max_profit);
}
int main() {
   float w[max], p[max],M;
   int N,i, j;
   float ratio[max];
   printf("\nEnter knapsack capacity M: ");
   scanf("%f", &M);
   printf("\nEnter number of objects N:");
   scanf("%d",&N);
   printf("\nEnter profit of each object:");
   for (i = 0; i < N; i++)
   {
      scanf("%f",&p[i]);
   }
   printf("\nEnter weight of each object:");
   for (i = 0; i < N; i++)
   {
      scanf("%f",&w[i]);
   }
   for (i = 0; i <N;i++) 
   {
      ratio[i] = p[i] /w[i];
   }
  for (i = 1; i < N; i++) 
    {
        float key = ratio[i];
        float p_key=p[i];
        float w_key=w[i];
        j = i - 1;
        while (j >= 0 && ratio[j] <key) 
        {
            ratio[j + 1] = ratio[j];
            w[j+1]=w[j];
            p[j+1]=p[j];
            j = j - 1;
         }
        p[j+1]=p_key;
        w[j+1]=w_key; 
        ratio[j+1]=key;
    }
   Greedy_Knapsack(N,w,p,M);
   return(0);
}


//(exp-6c-job sequencing)

#include<stdio.h>
int n,i,j,k,t;
int check(int s[],int p)
       {  int ptr=0;
           for(int i=0;i<n;i++)
           {if(s[i]==p)
               ptr++;
      }           
            if(ptr==0)
            return 1;
            else
            return 0;
        }    
                     
int main()
{  
     printf("enter the no of jobs: ");
     scanf("%d",&n);
     int slot[n],profit,p[n],sp=0,d[n];
     for(i=0;i<n;i++)
       {printf("\n enter the profit of job #%d: ",i+1);
       scanf("%d",&p[i]);                 
       printf("\n enter the deadline of job #%d: ",i+1);
       scanf("%d",&d[i]);
       }
      
     for(i=0;i<n;i++)
        for(j=i+1;j<n;j++)
         if(p[i]<p[j])
            { t=p[i];
              p[i]=p[j];
              p[j]=t;
              t=d[i];
              d[i]=d[j];
              d[j]=t;  
              
            }
              
       for(i=0;i<n;i++)
           slot[i]=0;         
                 
     for(i=0;i<n;i++)
         for(j=d[i];j>0;j--)
             {if(check(slot,j)==1)
                {slot[i]=j;
                sp=sp+p[i];
                break;} 
             }
           
     printf("\n\n INDEX   PROFIT  DEADLINE  SLOT ALLOTTED ");      
     for(i=0;i<n;i++)
     {if(slot[i]>0)
     printf("\n\n   %d       %d        %d        [%d - %d]", i+1,p[i],d[i],(slot[i]-1),slot[i]);
     else
     printf("\n\n   %d       %d        %d       REJECTED", i+1,p[i],d[i]);
     
     }
   printf("\n\n Max Profit: %d" ,sp);     
      return 0;
}


//(exp-7-priority using hufmann)

#include<stdio.h>
int size =0;
void swap(int *a,int *b)
{
	int temp;
	temp=*a;
	*a=*b;
	*b=temp;
}
void sort(int arr[],int n)
{
	for(int i=0;i<n-1;i++)
	{
		for(int j=i+1;j<n;j++)
		{
			if(arr[j]<arr[i])
			{
				swap(&arr[j],&arr[i]);
			}
		}
	}
}
void printarray(int arr[],int n)
{
	for(int i=0;i<n;i++)
	{
		printf("%d\t",arr[i]);
	}
	printf("\n");
}
void minheapify(int arr[],int i)
{
	int min = i;
	int l = 2*i+1;
	int r= 2*i+2;
	if(l<size && arr[l]<arr[min])
	{
		min =l;
	}
	if(r<size && arr[r]<arr[min])
	{
		min =r;
	}
	if(min!=i)
	{
		swap(&arr[i],&arr[min]);
		minheapify(arr,min);
	}
}
void buildheap(int arr[])
{
	for(int i=(size/2)-1;i>=0;i--)
	{
		minheapify(arr,i);
	}
}
int extract(int arr[])
{
	int x = arr[0];
	swap(&arr[0],&arr[size-1]);
	size = size-1;
	for(int i=(size/2)-1;i>=0;i--)
		{
			minheapify(arr,i);
		}
	return x;
}
void insert(int arr[],int element)
{
	if(size==0)
	{
		arr[0]=element;
		size++;
	}
	else
	{
		arr[size]=element;
		size++;
		for(int i=(size/2)-1;i>=0;i--)
		{
			minheapify(arr,i);
		}
	}
}
void hufmann(int arr[])
{
	while(size>1)
	{
		int x= extract(arr);
		int y= extract(arr);
		insert(arr,x+y);
		sort(arr,size);
		printarray(arr,size);
	}
}
int main()
{
	int m,ele;
	printf("enter the number of frequencies\n");
	scanf("%d",&m);
	int arr[m];
	printf("enter the frequencies\n");
	for(int i=0;i<m;i++)
	{
	    scanf("%d",&ele);
	    insert(arr,ele);
	}
	sort(arr,size);
	printarray(arr,m);
	printf("\n");
	hufmann(arr);
}


//(exp-8a-dynamic 0/1 knapsack)

#include<stdio.h>
#include<stdlib.h>
int max(int a,int b){
    if(a>b)
        return a;
    else
        return b;
}
void Knapsack(int w[],int p[],int n,int m){
     int rows = n+1;
     int col = m+1;
    int table[rows][col];
    for(int i=0;i<rows;i++){
        for(int j=0;j<col;j++)
          {
            table[i][j] = 0;
          }
     }
    for(int i = 1;i<rows;i++)
      {
        for(int j = 1;j<col ;j++ )
          {
            if(j>=w[i-1]){
              table[i][j] = max(table[i-1][(j-w[i-1])]+p[i-1],table[i-1][j]);
            }else {
              table[i][j] = table[i-1][j];
            }
          }
      }
  printf("\n");
    for(int i=1;i<rows;i++)
    {
      for(int j=1;j<col;j++)
        printf("%d ",table[i][j]);
      printf("\n");
    }
  rows-=1;
  col-=1;
  printf("Max Profit is: %d" ,table[rows][col]);
  printf("\n");
}
int main()
{
    int n,m;
    printf("Enter the Knapsack Capacity:");
    scanf("%d",&m);
    printf("Enter the number of objects:");
    scanf("%d",&n);
    int w[n];
    int p[n];
    printf("Enter the weight of objects:");
    for(int i=0;i<n;i++){
        scanf("%d",&w[i]);
    }
    printf("Enter the Price of:");
    for(int i=0;i<n;i++){
        scanf("%d",&p[i]);
    }
  Knapsack(w,p,n,m);
}


//(exp-8a-optimal sequence)

#include <stdio.h>
int max(int a,int b)
{
	if (a>b)
	return a;
	else
	return b;
}
void knapsack_sol(int w[],int p[],int n,int weight,int dp[n+1][weight+1])
{
    int hash[n];
    for(int i=0;i<n;i++)
    hash[i]=0;
    int i = n;
    int j = weight;
   while(i> 0 && j > 0)
   {
     int temp1=0;
     if(j >= w[i-1])
        temp1 = p[i-1]+dp[i-1][j-w[i-1]];

       if(temp1==dp[i][j]){
         hash[i-1]=1;
         j =j-w[i-1];
         i--;
    
       }
         else 
         i--;
   }
    printf("\n");
     for(int i=0;i<n;i++)
      printf("%d ",hash[i]);
}
void  knapsack_dp(int w[],int p[],int n,int weight)
{
     int dp[n+1][weight+1];

     for(int i=0;i<=n;i++)
     dp[i][0]=0;

     for(int i=0;i<=weight;i++)
     dp[0][i]=0;

     for(int i=1;i<=n;i++)
      for(int j=1;j<=weight;j++)
      {
          if(j >= w[i-1])
          dp[i][j] = max(p[i-1]+dp[i-1][j-w[i-1]],
          dp[i-1][j]);
          else 
          dp[i][j] = dp[i-1][j];
      }
     knapsack_sol(w,p,n,weight,dp);     
}
int main(void) {
  int n;
  printf("Enter the knapsack capacity: ");
  int W;
  scanf("%d",&W);
  printf("Enter the no of objects: ");
  scanf("%d",&n);
  int w[n],p[n];
  printf("Enter the weight of objects: ");
  for(int i=0;i<n;i++)
  scanf("%d",&w[i]);
  printf("Enter the profit of objects: ");
  for(int i=0;i<n;i++)
  scanf("%d",&p[i]);
  knapsack_dp(w,p,n,W);
  return 0;
}


//(exp-9-bfs)

#include<stdio.h>
int q[20],f=-1,r=-1;
typedef struct{
    int col;
    int d;
    int pi;
}node;
int isEmpty()
{
    if(f==-1&&r==-1)
        return 1;
    else
        return 0;
}
void Enqueue(int k)
{
    if(f==-1&&r==-1)
    {
        f=r=0;
        q[f]=k;
    }
    else{
        r=(r+1)%10;
        q[r]=k;
    }
}
int Dequeue(){
    int ret;
    if(f==r){
        ret=q[f];
        f=r=-1;
    }
    else{
        ret=q[f];
        f=(f+1)%10;
    }
    return ret;
}
void bfs(int g[][30],int n,node *v,int start)
{
    for(int i=0;i<n;i++)
    {
        if(i!=start)
        {
            v[i].col=0;
            v[i].d=35555;
            v[i].pi=-1;
        }
    }
    v[start].col=1;
    v[start].d=0;
    v[start].pi=-1;
    Enqueue(start);
    while(!isEmpty())
    {
        int u=Dequeue();
        for(int i=0;i<n;i++)
        {
            if(i!=u)
            {
                if(g[u][i]==1&&v[i].col==0)
                {
                    v[i].col=1;
                    v[i].d=v[u].d+1;
                    v[i].pi=u;
                    Enqueue(i);
                }
            }
        }
        v[u].col=2;
    }
}
int main()
{
    int n,startnode;
    printf("Enter the number of vertices:\n");
    scanf("%d",&n);
    int g[30][30]={0};
    node v[n];
    printf("Enter the start node:\n");
    scanf("%d",&startnode);
    printf("Enter the adjacency matrix:\n");
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            scanf("%d",&g[i][j]);
        }
    }
    bfs(g,n,v,startnode);
    printf("\nNode\t\tDistance from source: %d\t\t Parent\n",startnode);
    for(int i=0;i<n;i++)
    {
        printf("Node:\n%d\t\t\t%d\t\t%d\t\t\t\t\n",i,v[i].d,v[i].pi);
    }
}
